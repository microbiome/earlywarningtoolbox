nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
x1<-1:mw#
for (i in 1:omw){ 	 #
Ytw<-nsmY[i:(i+mw-1)]#
nMR[,i]<-Ytw}#
# Calculate indicators#
nARR<-numeric()#
nSD<-numeric()#
nSK<-numeric()#
nKURT<-numeric()#
nACF<-numeric()#
nDENSITYRATIO<-numeric()#
nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
nCV<-numeric()#
smARall<-numeric()#
smARmaxeig<-numeric()#
detB<-numeric()#
ARn<-numeric()#
for (i in 1:ncol(nMR)){#
nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
nARR[i]<-nYR$ar#
nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
nCV[i]<-nSD[i]/mean(nMR[,i])#
ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
nACF[i]<-ACF$acf[2]#
spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
nSPECT[,i]<-spectfft$spec#
nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
#
## RESILIENCE IVES 2003 Indicators based on AR(n)#
ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
smARall[i]<-ARall$ar[1]#
ARn[i]<-ARall$order#
roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
smARmaxeig[i]<-max(roots)#
detB[i]<-(prod(roots))^(2/ARn[i])}#
#
nRETURNRATE=1/nARR#
#
# Estimate Kendall trend statistic for indicators#
timevec<-seq(1,length(nARR))#
KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
# Plotting#
# Generic Early-Warnings#
dev.new()#
par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
if(detrending=="gaussian"){#
lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
}#
if(detrending=="no"){#
plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
text(5,5,"no residuals - no detrending")#
}else if (detrending=="first-diff"){#
limit<-max(c(max(abs(nsmY))))#
plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
legend("topleft","first-differenced",bty = "n")		}else{#
limit<-max(c(max(abs(nsmY))))#
plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("topleft","residuals",bty = "n")}#
plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
legend("topleft","ar(1)",bty = "n")#
plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
legend("topleft","acf(1)",bty = "n")#
plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
legend("topleft","return rate",bty = "n")#
plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
legend("topleft","density ratio",bty = "n")#
plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
legend("topleft","standard deviation",bty = "n")#
if(detrending=="no"){#
plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
legend("topleft","coefficient of variation",bty = "n")}else{#
plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("topleft","skewness",bty = "n")#
legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
mtext("time",side=1,line=2,cex=0.8)#
plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
legend("topleft","kurtosis",bty = "n")#
legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
mtext("time",side=1,line=2,cex=0.8)#
mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
# Resilience Estimators based on AR(n)#
if (AR_n){#
dev.new()#
par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
legend("topleft","AR(n)",bty = "n")#
plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
legend("topleft","max eigenvalue",bty = "n")#
plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
mtext("time",side=1,line=2,cex=0.8)#
legend("topleft","geometric mean root AR(n)",bty = "n")#
plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
mtext("time",side=1,line=2,cex=0.8)#
legend("topleft","b1 of AR(n)",bty = "n")#
mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
}#
#
# Power spectrum#
if (powerspectrum){#
dev.new()#
par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
}#
#
# Output#
out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
return(out)#
}
?generic_ews
generic_ews(x)
install.packages("~/Downloads/ecosys_0.0.02.tar.gz", repos = NULL)
library(ecosys)
install.packages("~/Downloads/ecosys_0.0.02.tar.gz", repos = NULL)
write_PACKAGES("~/Downloads")
getwd()
install.packages("~/Downloads/earlywarnings_1.0.tar.gz", repos = NULL, lib="~Library/R/2.14/library")
install.packages("~/Downloads/earlywarnings_1.0.tar.gz", repos = NULL, lib="~/Library/R/2.14/library")
install.packages("~/Downloads/earlywarnings_1.0.tar", repos = NULL, lib="~/Library/R/2.14/library")
library(earlywarnings)
?generic_ews
library(ecosys)
install.packages("~/Downloads/ecosys_0.0.02.tar.gz", repos = NULL, lib="~/Library/R/2.14/library")
library(ecosys)
install.packages("~/Downloads/alfa_0.0-0.tar", repos = NULL, lib="~/Library/R/2.14/library")
install.packages("~/RForgeTools_0.4-13.tar", repos = NULL, lib="~/Library/R/2.14/library")
install.packages("~/Downloads/RForgeTools_0.4-13.tar", repos = NULL, lib="~/Library/R/2.14/library")
library(RForgeTools)
library(alfa)
?bds_test
?bdstest_ews
bdstest_ews
garch
?bdstest_ews
library(timeseries
)
library(timeseries)
library(tseries)
install.package('timeseries')
install.packages('timeseries')
install.packages('tseries')
library(tseries)
data(foldbif)#
bdstest_ews(foldbif,ARMAoptim=FALSE,ARMAorder=c(1,0),embdim=3,epsilon=0.5,boots=200,logtransform=FALSE,interpolate=FALSE)
require(e1071)
?which
?garch
require(tseries)
?garch
?skewness
?kurtosis
?image.plot
?garch
?bds.test
require(fields)
install.package(fields)
install.packages(fields)
?install.packages
install.packages('fields')
require(field)
install.packages(field)
install.packages(fields)
require(fields)
?image.plot
require(fields)
install.packages(spam)
require(fields)
?image.plot
?apply
library(earlywarnings)
?generic_ews
?sensitivity_ews
install.packages("staticdocs")
install.packages("~/Downloads/master.zip", repos = NULL)
install.packages("staticdocs")
chooseCRANmirror
chooseCRANmirror()
install.packages("roxygen2")
install.packages("roxygen")
install.packages("devtools")
install.packages("testthat")
librayry(roxygen)
library(roxygen)
library(roxygen2)
library(testthat)
library(devtools)
?devtools
?install.github
?roxygen
install.github
install.github()
devtools
library()
?install.github
?install_github
library("devtools")
library("tools")
library("roxygen2")
library("Rd2roxygen")
library("testthat")
rd.file=system.file("ch_ews.Rd")
parse_save(rd.file,"test")
parse_and_save(rd.file,"test")
source('~/Dropbox/earlywarnings/R/potential.R')
source('~/Dropbox/earlywarnings/R/potential.R')
X = c(rnorm(1000, mean = 0), rnorm(1000, mean = -2), rnorm(1000, mean = 2))
param = seq(0,5,length=3000)
res <- movpotential(X, param, npoints = 100, thres = 0.003)
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
library("ggplot2")
detach("package:ggplot2")
res <- movpotential(X, param, npoints = 100, thres = 0.003)
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
library(akima,ggplot2)
?ggplot
library(ggplot2)
?library
detach("package:ggplot2")
library('akima','ggplot2')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
source('~/Dropbox/earlywarnings/R/potential.R')
PlotPotential <- function (res, title = "", xlab.text, ylab.text, cutoff = 0.5) {
library(akima)
library(ggplot2)
cut.potential <- max(apply(res$pots, 1, min)) + cutoff*abs(max(apply(res$pots, 1, min))) # Ensure all minima are visualized
pots <- res$pots
pots[pots > cut.potential] <- cut.potential
# Static contour
# Interpolate potential grid
intp <- akima::interp(as.vector(res$pars), as.vector(res$xis), as.vector(pots))
xy <- expand.grid(intp$x, intp$y)
z <- as.vector(intp$z)
z[is.na(z)] <- max(na.omit(z))
df <- data.frame(list(bg.var = xy[,1], phylotype = xy[,2], potential = z))
p<-ggplot(df, aes(bg.var, phylotype, z = potential)) + geom_tile(aes(fill = potential)) + stat_contour(binwidth = 0.2)
p <- p + xlab(xlab.text) + ylab(xlab.text) + opts(title = title)
p
}
library(ggplot2)
res <- movpotential(X, param, npoints = 100, thres = 0.003)
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
??ggplot
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
p
res
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
res$p
source('~/Dropbox/earlywarnings/R/potential.R')
res <- movpotential(X, param, npoints = 100, thres = 0.003)
res$p
res$p
source('~/Dropbox/earlywarnings/R/potential.R')
getwd()
setwd(~/Dropbox)
setwd('~/Dropbox')
ls
dir
dir()
roxygenize(earlywarnings)
library("devtools")
library("roxygen2")
library("testthat")
roxygenize(earlywarnings)
?roxygenise
roxygenize('Dropbox/earlywarnings',overwrite=TRUE)
getwd()
setwd(~/Dropbox/earlywarnings)
setwd('~/Dropbox/earlywarnings')
roxygenize('Dropbox/earlywarnings',overwrite=TRUE)
roxygenize('~Dropbox/earlywarnings',overwrite=TRUE)
roxygenize('~/Dropbox/earlywarnings',overwrite=TRUE)
roxygenize('~/Dropbox/earlywarnings',overwrite=TRUE)
install.packages('fractal')
library(fractal)
?DFA
polyroot(c(0.91,-0.37,0.49,1.035))
polyroot(c(1.035,0.49,-0.37,0.91))
polyroot(c(0.004,0.49,-0.37,0.91))
polyroot(c(-0.4,0.49,-0.37,0.91))
test=polyroot(c(-0.4,0.49,-0.37,0.91))
real(test)
?real
?re
?imag
?imaginary
?complex
?Re
Re(test)
Im(test)==0
tets
tets
test
test[1]
Im(test[1])
unitroot(function(x) 0.91*x^3-0.37*x^2+0.49*x-0.4, lower=0, upper=1)
uniroot(function(x) 0.91*x^3-0.37*x^2+0.49*x-0.4, lower=0, upper=1)
0<=1
?matrix
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
c=0.96
(0.936<c && c<=0.967)
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
data(foldbif)
plot(foldbif)
foldbif
plot(foldbif[,2])
plot(foldbif[,1])
dfa_ews(foldbif)
dfa_ews(foldbif)
dfa_ews(foldbif)
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
dfa_ews(foldbif)
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
dfa_ews(foldbif)
warnings()
foldbif
dim(foldbif)
test=data.matrix(foldbif)
dim(test)
Y=timeseries
Y=test
plot(Y)
ar=acf(Y,plot=FALSE)
ar[[1]]
ar[1]
ar[1][1]
ar[1][[1]
ar[1][[1]]
ar[1][[1]]
ar[2]
ar[1]
ar[1][1]
ar[1][[1]
]
# Rearrange data for indicator calculation
mw<-round(length(Y)*winsize/100)
omw<-length(Y)-mw+1 ##number of moving windows
nMR<-matrix(data=NA,nrow=mw,ncol=omw)
x1<-1:mw
for (i in 1:omw){
Ytw<-Y[i:(i+mw-1)]
nMR[,i]<-Ytw}
DFAindicator<-numeric()
zeta=numeric()
Y
winsize=50
mw<-round(length(Y)*winsize/100)
omw<-length(Y)-mw+1 ##number of moving windows
nMR<-matrix(data=NA,nrow=mw,ncol=omw)
x1<-1:mw
for (i in 1:omw){
Ytw<-Y[i:(i+mw-1)]
nMR[,i]<-Ytw}
DFAindicator<-numeric()
zeta=numeric()
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(0.52-DFAindicator[i],0.49,-0.37,0.91)
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(-11.28-DFAindicator[i],25.14,-12.38)
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
DFAindicator<-numeric()
zeta=numeric()
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(0.52-DFAindicator[i],0.49,-0.37,0.91)
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(-11.28-DFAindicator[i],25.14,-12.38)
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
detrending="none"
DFAindicator<-numeric()
zeta=numeric()
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(0.52-DFAindicator[i],0.49,-0.37,0.91)
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(-11.28-DFAindicator[i],25.14,-12.38)
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
sum.order=0
DFAindicator<-numeric()
zeta=numeric()
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(0.52-DFAindicator[i],0.49,-0.37,0.91)
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(-11.28-DFAindicator[i],25.14,-12.38)
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
i
roots=polyroot((-11.28-DFAindicator[i])25.14,-12.38)
roots=polyroot(-11.28-DFAindicator[i],25.14,-12.38)
roots=polyroot((-11.28-DFAindicator[i]),25.14,-12.38)
roots
polyroot((-11.28-DFAindicator[i]),25.14,-12.38)
polyroot((-11.28-DFAindicator[i]),25.14,-12.38)
DFAindicator[i]
-11.28-DFAindicator[i]
alpha=(-11.28-DFAindicator[i])
roots=polyroot(alpha,25.14,-12.38)
roots=polyroot(-11,25.14,-12.38)
roots=polyroot(c(-11.28-DFAindicator[i],25.14,-12.38))
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(c(0.52-DFAindicator[i],0.49,-0.37,0.91))
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(c(-11.28-DFAindicator[i],25.14,-12.38))
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
DFA(Y)
DFA(Y,detrending="none")
DFA(Y,detrend="none")
test=DFA(Y,detrend="none")
plot(test)
test=DFA(Y,detrend="poly1")
plot(test)
# Rearrange data for indicator calculation
mw<-round(length(Y)*winsize/100)
omw<-length(Y)-mw+1 ##number of moving windows
nMR<-matrix(data=NA,nrow=mw,ncol=omw)
x1<-1:mw
for (i in 1:omw){
Ytw<-Y[i:(i+mw-1)]
nMR[,i]<-Ytw}
DFAindicator<-numeric()
zeta=numeric()
for (i in 1:ncol(nMR)){
nYR<-DFA(nMR[,i],detrend=detrending,sum.order=sum.order)
DFAindicator[i]<-nYR[[1]]
# Rescale
if (c<=0.936){
roots=polyroot(c(0.52-DFAindicator[i],0.49,-0.37,0.91))
zeta[i]=roots[1]
}else if (0.936<c && c<=0.967){
roots=polyroot(c(-11.28-DFAindicator[i],25.14,-12.38))
zeta[i]=roots[1]
} else {
zeta[i]=(DFAindicator[i]-0.75)/0.72
}
}
plot(zeta)
plot(Re(zeta)
)
plot(DFAindicator)
source('~/Dropbox/earlywarnings/R/dfa_ews.R')
plot(Re(zeta)
)
